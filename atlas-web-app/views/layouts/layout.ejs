<!DOCTYPE html>
<html lang="en">
  <head>
    <title>ATLAS</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/atlas_styles.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <!-- For free icons -->
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>

    <!-- Place this tag in your head or just before your close body tag. -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>
  </head>

  <body>
    <!-- BEGIN NAVBAR START -->
    <nav class="navbar" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <a class="navbar-item is-size-4 has-text-weight-bold" href="/home">
          <i class="fas fa-atlas fa-2x"></i> &nbsp; ATLAS
        </a>

        <!--
        <a class="navbar-item is-size-4 has-text-weight-bold" href="/home">
          ATLAS
        </a>
        -->

        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>

      <div id="navbarBasicExample" class="navbar-menu">
        <div class="navbar-start">
          <div class="navbar-item has-dropdown is-hoverable">
            <a class="navbar-link">
              Find
            </a>

            <div class="navbar-dropdown">
              <a class="navbar-item" href="/landing-geo-loc-near">
                Near Scenes
              </a>
              <a class="navbar-item" href="/update-record-form">
                By ID
              </a>
              <a class="navbar-item" href="/record">
                ALL as JSON
              </a>
            </div>
          </div>

          <a class="navbar-item" href="/portal">
            Connect
          </a>

          <div class="navbar-item has-dropdown is-hoverable">
            <a class="navbar-link" href="/manage">
              Manage
            </a>

            <div class="navbar-dropdown">
              <a class="navbar-item" href="/create-record-form">
                Create Record
              </a>
              <a class="navbar-item" href="/update-record-form">
                Modify Record
              </a>
              <a class="navbar-item" href="/delete-record-form">
                Delete Record
              </a>
              <hr class="navbar-divider">
              <a class="navbar-item" href="/search-records-form">
                Advanced Search
              </a>
            </div>
          </div>
        </div>

        <div class="navbar-end">
          <div class="navbar-item">
            <div class="buttons">
              <a class="github-button" href="https://github.com/conix-center/ATLAS/archive/master.zip"
                 data-color-scheme="no-preference: dark; light: light; dark: dark;" data-size="large"
                 aria-label="Download conix-center/ATLAS on GitHub">
                   Download
              </a>
            </div>
          </div>
        </div>
      </div>
    </nav>
    <!-- END NAVBAR FIN -->



    <!-- body grabbed from view -->
    <%- body %>



    <!-- START FOOTER BEGIN -->
    <nav class="level">
      <div class="level-item has-text-centered">
        <figure class='image'>
          <a href="https://conix.io/">
            <img src="/images/conix-face-128.png">
          </a>
        </figure>
      </div>
    </nav>
    <!-- END FOOTER FIN -->



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/js/all.js"></script>
    <script src="/js/api-request-delete-record.js"></script>
    <script src="/js/api-request-get-record.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
